[
	{ "keys": ["ctrl+7"], "command": "toggle_comment", "args": { "block": false } },
	{ "keys": ["ctrl+shift+7"], "command": "toggle_comment", "args": { "block": true } },
	{ "keys": ["ctrl+shift+,"], "command": "run_macro_file", "args": {"file": "res://Packages/User/puntoYcoma.sublime-macro"} },
	{ "keys": ["ctrl+,"], "command": "run_macro_file", "args": {"file": "res://Packages/User/coma.sublime-macro"} },
	{ "keys": ["ctrl+alt+,"], "command": "run_macro_file", "args": {"file": "res://Packages/User/coma-final.sublime-macro"} },
	{ "keys": ["ctrl+shift+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/dos-puntos-final.sublime-macro"} },
	{ "keys": ["ctrl+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/punto-simple.sublime-macro"} },
	{ "keys": ["ctrl+alt+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/punto-final.sublime-macro"} },
	{ "keys": ["shift+alt+."], "command": "run_macro_file", "args": {"file": "res://Packages/User/dos-puntos-json.sublime-macro"} },
	{ "keys": ["ctrl+alt+'"], "command": "run_macro_file", "args": {"file": "res://Packages/User/addvaluejs.sublime-macro"} },
	{ "keys": ["ctrl+shift+'"], "command": "run_macro_file", "args": {"file": "res://Packages/User/addvaluejsV2.sublime-macro"} },
	{ "keys": ["ctrl+'"], "command": "run_macro_file", "args": {"file": "res://Packages/User/addvaluejsV3.sublime-macro"} },
	{ "keys": ["ctrl+1"], "command": "run_macro_file", "args": {"file": "res://Packages/User/llaveV3.sublime-macro"} },
	{ "keys": ["ctrl+2"], "command": "run_macro_file", "args": {"file": "res://Packages/User/llavev2.sublime-macro"} },
	{ "keys": ["ctrl+alt++"], "command": "run_macro_file", "args": {"file": "res://Packages/User/mas.sublime-macro"} },
	{ "keys": ["ctrl+alt+3"], "command": "run_macro_file", "args": {"file": "res://Packages/User/comillas-principio-fin.sublime-macro"} },
	{ "keys": ["ctrl+shift+r"], "command": "run_macro_file", "args": {"file": "res://Packages/User/mandar-al-final.sublime-macro"} },
	{ "keys": ["alt+backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/User/remove-subword-left.sublime-macro"} },
	{ "keys": ["alt+delete"], "command": "run_macro_file", "args": {"file": "res://Packages/User/remove-subword-right.sublime-macro"} },
	{ "keys": ["ctrl+shift+0"], "command": "run_macro_file", "args": {"file": "res://Packages/User/igual-final.sublime-macro"} },
	{ "keys": ["shift+alt+down"], "command": "select_lines", "args": {"forward": true} },
	{ "keys": ["shift+alt+up"], "command": "select_lines", "args": {"forward": false} },
	{ "keys": ["ctrl+alt+1"], "command": "focus_group", "args": { "group": 0 } },
	{ "keys": ["ctrl+alt+2"], "command": "focus_group", "args": { "group": 1 } },
	{"keys": ["super+ctrl+o"], "command": "project_manager", "args": {"action": "new"} },
	{ "keys": ["ctrl+0"], "command": "insert_snippet", "args": { "name": "Packages/User/separator.sublime-snippet" } },
	{ "keys": ["ctrl+0"], "command": "insert_snippet", "args": { "name": "Packages/User/separator-marcos.sublime-snippet" } },
	{ "keys": ["ctrl+9"], "command": "insert_snippet", "args": { "name": "Packages/User/subseparator.sublime-snippet" } },
	{ "keys": ["ctrl+alt+c"], "command": "insert_snippet", "args": { "name": "Packages/User/console-log.sublime-snippet" } },
	{ "keys": ["ctrl+shift+v"], "command": "paste_and_indent" },
	{
	  "keys": ["tab"], 
	  "command": "expand_abbreviation_by_tab", 

	  // put comma-separated syntax selectors for which 
	  // you want to expandEmmet abbreviations into "operand" key 
	  // instead of SCOPE_SELECTOR.
	  // Examples: source.js, text.html - source
	  "context": [
	    {
	      "operand": "meta.group.braces.round.js", 
	      "operator": "equal", 
	      "match_all": true, 
	      "key": "selector"
	    }, 

	    // run only if there's no selected text
	    {
	      "match_all": true, 
	      "key": "selection_empty"
	    },

	    // don't work if there are active tabstops
	    {
	      "operator": "equal", 
	      "operand": false, 
	      "match_all": true, 
	      "key": "has_next_field"
	    }, 

	    // don't work if completion popup is visible and you
	    // want to insert completion with Tab. If you want to
	    // expand Emmet with Tab even if popup is visible -- 
	    // remove this section
	    {
	      "operand": false, 
	      "operator": "equal", 
	      "match_all": true, 
	      "key": "auto_complete_visible"
	    }, 
	    {
	      "match_all": true, 
	      "key": "is_abbreviation"
	    }
	  ]
	}
]
